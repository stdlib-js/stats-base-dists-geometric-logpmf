{"version":3,"file":"index.mjs","sources":["../lib/main.js","../lib/factory.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {NonPositiveNumber} logarithm of PMF\n*\n* @example\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* @example\n* var y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* @example\n* var y = logpmf( -1.0, 0.5 );\n* // returns -Infinity\n*\n* @example\n* var y = logpmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = logpmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = logpmf( 2.0, 1.5 );\n* // returns NaN\n*/\nfunction logpmf( x, p ) {\n\tvar q;\n\tif ( isnan( x ) || isnan( p ) ) {\n\t\treturn NaN;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tq = 1.0 - p;\n\t\treturn ln( p ) + (x * ln( q ));\n\t}\n\treturn NINF;\n}\n\n\n// EXPORTS //\n\nexport default logpmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport constantFunction from '@stdlib/utils-constant-function';\nimport isNonNegativeInteger from '@stdlib/math-base-assert-is-nonnegative-integer';\nimport isnan from '@stdlib/math-base-assert-is-nan';\nimport ln from '@stdlib/math-base-special-ln';\nimport NINF from '@stdlib/constants-float64-ninf';\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the logarithm of the probability mass function (PMF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} logPMF\n*\n* @example\n* var logpmf = factory( 0.5 );\n* var y = logpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = logpmf( 1.0 );\n* // returns ~-1.386\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn logpmf;\n\n\t/**\n\t* Evaluates the logarithm of the probability mass function (PMF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {NonPositiveNumber} evaluated logPMF\n\t*\n\t* @example\n\t* var y = logpmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction logpmf( x ) {\n\t\tvar q;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tq = 1.0 - p;\n\t\t\treturn ln( p ) + (x * ln( q ));\n\t\t}\n\t\treturn NINF;\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution logarithm of probability mass function (PMF).\n*\n* @module @stdlib/stats-base-dists-geometric-logpmf\n*\n* @example\n* import logpmf from '@stdlib/stats-base-dists-geometric-logpmf';\n*\n* var y = logpmf( 4.0, 0.3 );\n* // returns ~-2.631\n*\n* y = logpmf( 2.0, 0.7 );\n* // returns ~-2.765\n*\n* var mylogpmf = logpmf.factory( 0.5 );\n* y = mylogpmf( 3.0 );\n* // returns ~-2.773\n*\n* y = mylogpmf( 1.0 );\n* // returns ~-1.386\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["logpmf","x","p","q","isnan","NaN","isNonNegativeInteger","ln","NINF","factory","constantFunction","setReadOnly","main"],"mappings":";;umBA8DA,SAASA,EAAQC,EAAGC,GACnB,IAAIC,EACJ,OAAKC,EAAOH,IAAOG,EAAOF,IAGrBA,EAAI,GAAOA,EAAI,EAFZG,IAKHC,EAAsBL,IAC1BE,EAAI,EAAMD,EACHK,EAAIL,GAAOD,EAAIM,EAAIJ,IAEpBK,CACR,CC9BA,SAASC,EAASP,GACjB,OACCE,EAAOF,IACPA,EAAI,GACJA,EAAI,EAEGQ,EAAkBL,KAe1B,SAAiBJ,GAChB,IAAIE,EACJ,GAAKC,EAAOH,GACX,OAAOI,IAER,GAAKC,EAAsBL,GAE1B,OADAE,EAAI,EAAMD,EACHK,EAAIL,GAAOD,EAAIM,EAAIJ,GAE3B,OAAOK,CACP,CACF,CC1BAG,EAAAC,EAAA,UAAAH"}